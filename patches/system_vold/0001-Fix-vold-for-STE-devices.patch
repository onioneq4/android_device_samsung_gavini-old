diff --git a/Disk.cpp b/Disk.cpp
index 357342b..4678364 100644
--- a/Disk.cpp
+++ b/Disk.cpp
@@ -83,7 +83,7 @@ enum class Table {
 Disk::Disk(const std::string& eventPath, dev_t device,
         const std::string& nickname, int flags) :
         mDevice(device), mSize(-1), mNickname(nickname), mFlags(flags), mCreated(
-                false), mJustPartitioned(false), mSkipChange(false) {
+                false), mJustPartitioned(false) {
     mId = StringPrintf("disk:%u_%u", major(device), minor(device));
     mEventPath = eventPath;
     mSysPath = StringPrintf("/sys/%s", eventPath.c_str());
@@ -192,11 +192,6 @@ void Disk::destroyAllVolumes() {
 }
 
 status_t Disk::readMetadata() {
-
-    if (mSkipChange) {
-        return OK;
-    }
-
     mSize = -1;
     mLabel.clear();
 
@@ -259,12 +254,6 @@ status_t Disk::readPartitions() {
         return -ENOTSUP;
     }
 
-    if (mSkipChange) {
-        mSkipChange = false;
-        LOG(INFO) << "Skip first change";
-        return OK;
-    }
-
     destroyAllVolumes();
 
     // Parse partition table
@@ -424,45 +413,8 @@ status_t Disk::partitionMixed(int8_t ratio) {
     destroyAllVolumes();
     mJustPartitioned = true;
 
-    // Determine if we're coming from MBR
-    std::vector<std::string> cmd;
-    cmd.push_back(kSgdiskPath);
-    cmd.push_back("--android-dump");
-    cmd.push_back(mDevPath);
-
-    std::vector<std::string> output;
-    res = ForkExecvp(cmd, output);
-    if (res != OK) {
-        LOG(WARNING) << "sgdisk failed to scan " << mDevPath;
-        mJustPartitioned = false;
-        return res;
-    }
-
-    Table table = Table::kUnknown;
-    for (auto line : output) {
-        char* cline = (char*) line.c_str();
-        char* token = strtok(cline, kSgdiskToken);
-        if (token == nullptr) continue;
-
-        if (!strcmp(token, "DISK")) {
-            const char* type = strtok(nullptr, kSgdiskToken);
-            if (!strcmp(type, "mbr")) {
-                table = Table::kMbr;
-                break;
-            } else if (!strcmp(type, "gpt")) {
-                table = Table::kGpt;
-                break;
-            }
-        }
-    }
-
-    if (table == Table::kMbr) {
-        LOG(INFO) << "skip first disk change event due to MBR -> GPT switch";
-        mSkipChange = true;
-    }
-
     // First nuke any existing partition table
-    cmd.clear();
+    std::vector<std::string> cmd;
     cmd.push_back(kSgdiskPath);
     cmd.push_back("--zap-all");
     cmd.push_back(mDevPath);
diff --git a/Disk.h b/Disk.h
index 20f5522..a334069 100644
--- a/Disk.h
+++ b/Disk.h
@@ -109,8 +109,6 @@ protected:
     bool mCreated;
     /* Flag that we just partitioned and should format all volumes */
     bool mJustPartitioned;
-    /* Flag that we need to skip first disk change events after partitioning*/
-    bool mSkipChange;
 
     void createPublicVolume(dev_t device,
                     const std::string& fstype = "",
diff --git a/Loop.cpp b/Loop.cpp
index 8872d7a..6111904 100644
--- a/Loop.cpp
+++ b/Loop.cpp
@@ -145,28 +145,14 @@ int Loop::create(const char *id, const char *loopFile, char *loopDeviceBuffer, s
         mode_t mode = 0660 | S_IFBLK;
         unsigned int dev = (0xff & i) | ((i << 12) & 0xfff00000) | (7 << 8);
 
-        if (sehandle) {
-            rc = selabel_lookup(sehandle, &secontext, filename, S_IFBLK);
-            if (rc == 0)
-                setfscreatecon(secontext);
-        }
-
         if (mknod(filename, mode, dev) < 0) {
             if (errno != EEXIST) {
                 int sverrno = errno;
                 SLOGE("Error creating loop device node (%s)", strerror(errno));
-                if (secontext) {
-                    freecon(secontext);
-                    setfscreatecon(NULL);
-                }
                 errno = sverrno;
                 return -1;
             }
         }
-        if (secontext) {
-            freecon(secontext);
-            setfscreatecon(NULL);
-        }
 
         if ((fd = open(filename, O_RDWR | O_CLOEXEC)) < 0) {
             SLOGE("Unable to open %s (%s)", filename, strerror(errno));
diff --git a/PublicVolume.cpp b/PublicVolume.cpp
index bac6499..3f6bbfd 100644
--- a/PublicVolume.cpp
+++ b/PublicVolume.cpp
@@ -113,9 +113,11 @@ status_t PublicVolume::doMount() {
         return -EIO;
     }
 
-    // Use UUID as stable name, if available
+    // Use volume label and otherwise UUID as stable name, if available
     std::string stableName = getId();
-    if (!mFsUuid.empty()) {
+    if (!mFsLabel.empty()) {
+        stableName = mFsLabel;
+    } else if (!mFsUuid.empty()) {
         stableName = mFsUuid;
     }
 
@@ -205,27 +207,15 @@ status_t PublicVolume::doMount() {
     dev_t before = GetDevice(mFuseWrite);
 
     if (!(mFusePid = fork())) {
-        if (getMountFlags() & MountFlags::kPrimary) {
-            if (execl(kFusePath, kFusePath,
-                    "-u", "1023", // AID_MEDIA_RW
-                    "-g", "1023", // AID_MEDIA_RW
-                    "-U", std::to_string(getMountUserId()).c_str(),
-                    "-w",
-                    mRawPath.c_str(),
-                    stableName.c_str(),
-                    NULL)) {
-                PLOG(ERROR) << "Failed to exec";
-            }
-        } else {
-            if (execl(kFusePath, kFusePath,
-                    "-u", "1023", // AID_MEDIA_RW
-                    "-g", "1023", // AID_MEDIA_RW
-                    "-U", std::to_string(getMountUserId()).c_str(),
-                    mRawPath.c_str(),
-                    stableName.c_str(),
-                    NULL)) {
-                PLOG(ERROR) << "Failed to exec";
-            }
+        if (execl(kFusePath, kFusePath,
+                  "-u", "1023", // AID_MEDIA_RW
+                  "-g", "1023", // AID_MEDIA_RW
+                  "-U", std::to_string(getMountUserId()).c_str(),
+                  "-w",
+                  mRawPath.c_str(),
+                  stableName.c_str(),
+                  NULL)) {
+            PLOG(ERROR) << "Failed to exec";
         }
 
         LOG(ERROR) << "FUSE exiting";
diff --git a/Utils.cpp b/Utils.cpp
index 6ffdd7f..a4f136b 100644
--- a/Utils.cpp
+++ b/Utils.cpp
@@ -69,11 +69,6 @@ status_t CreateDeviceNode(const std::string& path, dev_t dev) {
     status_t res = 0;
 
     char* secontext = nullptr;
-    if (sehandle) {
-        if (!selabel_lookup(sehandle, &secontext, cpath, S_IFBLK)) {
-            setfscreatecon(secontext);
-        }
-    }
 
     mode_t mode = 0660 | S_IFBLK;
     if (mknod(cpath, mode, dev) < 0) {
@@ -84,11 +79,6 @@ status_t CreateDeviceNode(const std::string& path, dev_t dev) {
         }
     }
 
-    if (secontext) {
-        setfscreatecon(nullptr);
-        freecon(secontext);
-    }
-
     return res;
 }
 
@@ -105,19 +95,9 @@ status_t PrepareDir(const std::string& path, mode_t mode, uid_t uid, gid_t gid)
     const char* cpath = path.c_str();
 
     char* secontext = nullptr;
-    if (sehandle) {
-        if (!selabel_lookup(sehandle, &secontext, cpath, S_IFDIR)) {
-            setfscreatecon(secontext);
-        }
-    }
 
     int res = fs_prepare_dir(cpath, mode, uid, gid);
 
-    if (secontext) {
-        setfscreatecon(nullptr);
-        freecon(secontext);
-    }
-
     if (res == 0) {
         return OK;
     } else {
@@ -282,15 +262,7 @@ status_t ForkExecvp(const std::vector<std::string>& args, security_context_t con
         }
     }
 
-    if (setexeccon(context)) {
-        LOG(ERROR) << "Failed to setexeccon";
-        abort();
-    }
     status_t res = android_fork_execvp(argc, argv, NULL, false, true);
-    if (setexeccon(nullptr)) {
-        LOG(ERROR) << "Failed to setexeccon";
-        abort();
-    }
 
     free(argv);
     return res;
@@ -314,15 +286,7 @@ status_t ForkExecvp(const std::vector<std::string>& args,
     }
     output.clear();
 
-    if (setexeccon(context)) {
-        LOG(ERROR) << "Failed to setexeccon";
-        abort();
-    }
     FILE* fp = popen(cmd.c_str(), "r");
-    if (setexeccon(nullptr)) {
-        LOG(ERROR) << "Failed to setexeccon";
-        abort();
-    }
 
     if (!fp) {
         PLOG(ERROR) << "Failed to popen " << cmd;
diff --git a/VolumeManager.cpp b/VolumeManager.cpp
index 2f623ef..ccfcff5 100755
--- a/VolumeManager.cpp
+++ b/VolumeManager.cpp
@@ -683,11 +683,6 @@ int VolumeManager::unmountAll() {
     }
     endmntent(fp);
 
-    for (auto path : toUnmount) {
-        SLOGW("Tearing down stale mount %s", path.c_str());
-        android::vold::ForceUnmount(path);
-    }
-
     return 0;
 }
 
diff --git a/cryptfs.c b/cryptfs.c
index e0cc45f..65bfaea 100644
--- a/cryptfs.c
+++ b/cryptfs.c
@@ -2649,7 +2649,8 @@ static int encrypt_groups(struct encryptGroupsData* data)
         data->count = 0;
 
         for (block = 0; block < block_count; block++) {
-            int used = bitmap_get_bit(block_bitmap, block);
+            int used = (aux_info.bg_desc[i].bg_flags & EXT4_BG_BLOCK_UNINIT) ?
+                    0 : bitmap_get_bit(block_bitmap, block);
             update_progress(data, used);
             if (used) {
                 if (data->count == 0) {
diff --git a/fs/Vfat.cpp b/fs/Vfat.cpp
index faff763..1e2e021 100644
--- a/fs/Vfat.cpp
+++ b/fs/Vfat.cpp
@@ -108,6 +108,11 @@ status_t Check(const std::string& source) {
             errno = EIO;
             return -1;
 
+        case 8:
+            SLOGE("Filesystem check failed (no filesystem)");
+            errno = ENODATA;
+            return -1;
+
         default:
             SLOGE("Filesystem check failed (unknown exit code %d)", rc);
             errno = EIO;
diff --git a/main.cpp b/main.cpp
index 4301b2e..214abab 100644
--- a/main.cpp
+++ b/main.cpp
@@ -73,11 +73,6 @@ extern "C" int vold_main(int argc, char** argv) {
 
     parse_args(argc, argv);
 
-    sehandle = selinux_android_file_context_handle();
-    if (sehandle) {
-        selinux_android_set_sehandle(sehandle);
-    }
-
     // Quickly throw a CLOEXEC on the socket we just inherited from init
     fcntl(android_get_control_socket("vold"), F_SETFD, FD_CLOEXEC);
     fcntl(android_get_control_socket("cryptd"), F_SETFD, FD_CLOEXEC);
-- 
2.5.0

